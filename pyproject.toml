[project]
name = "fastapi-url-shortener"
version = "0.1.0"
description = "FastAPI URL Shortener"
readme = "README.md"
requires-python = ">=3.13"
dependencies = [
    "fastapi[standard]>=0.115.12",
    "redis[hiredis]>=6.2.0",
    "typer>=0.16.0",
]

[dependency-groups]
dev = [
    "coverage>=7.9.2",
    "httpx>=0.28.1",
    "mypy>=1.16.1",
    "pre-commit>=4.2.0",
    "pytest>=8.4.1",
    "ruff>=0.12.1",
]

# mypy settings

[tool.mypy]
strict = true
plugins = [
    "pydantic.mypy",
]

# ruff settings

[tool.ruff]
required-version = ">=0.12.1"

src = [
    "url-shortener",
]

# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
    ".venv",
]

# Same as Black.
line-length = 88
indent-width = 4

# Assume Python 3.13
target-version = "py313"

[tool.ruff.lint]
select = [
    "ANN",  # flake8-annotations (ANN)
    "FAST",  # FastAPI (FAST)
    "I",  # isort (I)
    "F",  # Pyflakes (F)
    # "ASYNC", # flake8-async (ASYNC)
    "S",  # flake8-bandit (S)
    "BLE",  # flake8-blind-except (BLE)
    "FBT",  # flake8-boolean-trap (FBT)
    "B",  # flake8-bugbear (B)
    "COM",  # flake8-commas (COM)
    "C4",  # flake8-comprehensions (C4)
    "T10",  # flake8-debugger (T10)
    "DTZ",  # flake8-datetimez (DTZ)
    "EM",  # flake8-errmsg (EM)
    "ISC",  # flake8-implicit-str-concat (ISC)
    "ICN",  # flake8-import-conventions (ICN)
    "LOG",  # flake8-logging (LOG)
    "G",  # flake8-logging-format (G)
    "INP",  # flake8-no-pep420 (INP)
    "PIE",  # flake8-pie (PIE)
    "T20",  # flake8-print (T20)
    "PYI",  # flake8-pyi (PYI)
    "Q",  # flake8-quotes (Q)
    "RSE",  # flake8-raise (RSE)
    "RET",  # flake8-return (RET)
    "SLF",  # flake8-self (SLF)
    "SIM",  # flake8-simplify (SIM)
    "SLOT",  # flake8-slots (SLOT)
    "TC",  # flake8-type-checking (TC)
    "ARG",  # flake8-unused-arguments (ARG)
    "PTH",  # flake8-use-pathlib (PTH)
    "FLY",  # flynt (FLY)
    "C90",  # mccabe (C90)
    "N",  # pep8-naming (N)
    "PERF",  # Perflint (PERF)
    "E",  # pycodestyle Error (E)
    "W",  # pycodestyle Warning (W)
    "PGH",  # pygrep-hooks (PGH)
    "PLC",  # Convention (PLC)
    "PLE",  # Error (PLE)
    "PLR",  # Refactor (PLR)
    "PLW",  # Warning (PLW)
    "UP",  # pyupgrade (UP)
    "FURB",  # refurb (FURB)
    "RUF",  # Ruff-specific rules (RUF)
    "TRY",  # tryceratops (TRY)
]

ignore = [
    "TC006",  # runtime-cast-value (TC006)
    "RUF001",  # ambiguous-unicode-character-string (RUF001)
    "RUF002",  # ambiguous-unicode-character-docstring (RUF002)
    "RUF003",  # ambiguous-unicode-character-comment (RUF003)
    "S101",  # assert (S101) Checks for uses of the assert keyword.
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

[tool.ruff.lint.per-file-ignores]
"stuff.py" = [
    "T20",  # flake8-print (T20)
]
"test_crud.py" = [
    "S311"  # suspicious-non-cryptographic-random-usage (S311)
]
"test_create.py" = [
    "S311"  # suspicious-non-cryptographic-random-usage (S311)
]
